Get basic environment ready:

. Install the Virtual Environment
. Install python3
. Install ansible

Install collections if required:

. ansible-galaxy collection install fortinet.fortios:1.0.12
(installs into:~/.ansible/collections/ansible_collections)

Start work on Ansible:

. Create Vault "ansible_vault.yml" which contains:
..  sudo_password: ...
. Create text-file "ansible_vault.txt" with password of vault
. Create 'inventory' file
. Create 'main.yml'
.. gather_facts: true
.. become: true
.. roles
... common
.... tasks
.... handlers
.... files
.... templates
.... vars
.... defaults
..... main.yml # just variables, lowest precedence
.. vars_files:
... - "ansible_vault.yml"
.. vars:
... - ansible_become_password: "{{ sudo_password }}" # from ansible_vault.yml

'Role-based Ansible Structure'
USE THIS METHOD!  So logical and clean to follow..
mkdir roles{common,default}

'Traditional Ansible Structure'
Try to avoid

Run the playbook:

ansible-playbook -vvi ./inventory --vault-password-file ansible_vault.txt ./vmguests.yml

===

It is very useful to test on local vagrant images first.  On the Vagrant host:

vagrant ssh-config|grep IdentityFile
  IdentityFile Vagrant/ubuntu/18.04/.vagrant/machines/default/virtualbox/private_key

scp -P 2202 -i Vagrant/ubuntu/18.04/.vagrant/machines/default/virtualbox/private_key Vagrant/ubuntu/18.04/.vagrant/machines/default/virtualbox/private_key vagrant@127.0.0.1:

# in the Vagrantfile, ensure you map the Git repo between host and guest:
config.vm.synced_folder "/home/user/Git", "/Git"

vagrant ssh

cd /Git
echo "127.0.0.1" > inventory

ansible-galaxy install gabops.python
ansible-galaxy install geerlinguy.elasticsearch
ansible-galaxy role install elastic.elasticsearch,7.7.0

ansible-playbook --private_key ~/private-key -u vagrant -i inventory main.yml
