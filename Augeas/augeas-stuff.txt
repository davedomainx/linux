rsyslog.conf
============

augtool
defvar r /files/etc/rsyslog.conf
ls $r
print $r/#comment
	46 or so on a RHEL 6 box
rm $r/#comment
	leaves blank lines..
save

augtool> defvar g /files/boot/grub/grub.conf/

augtool> setm $g/title[*]/kernel loglevel 4
augtool> print $g/title[*]/kernel/loglevel
/files/boot/grub/grub.conf/title/kernel/loglevel = "4"
augtool> rm $g/title[*]/kernel/loglevel
rm : $g/title[*]/kernel/loglevel 1
augtool> print $g/title[*]/kernel/loglevel
augtool>



=====
Had a play arond with augeas/puppet - basically I am not sure if it is worth it
Cons:
	complicated to understand and make changes
	still needs an "onlyif" check (or not - this is so confusing..)
	I think 95% of file operations can be done with the below 3 puppet resources:
		puppet simple file_copy
		puppet templates
		puppet file_line

Pros:
	very good for complicated or tricky configuration files
	lenses are excellent (but nearly impossible to understand the internal structure)

=====
augtool basically breaks up a file into Xpath nodes
	where node is a key-pair value
	augeas has 'lens', which are how it knows how to break up the file..

augtool> ls /augeas/files/etc/hosts
	# this checks if augeas knows about the file (has a lens for it)

augtool> print /augeas//error
match /augeas//error
ls /augeas/files/boot/grub/grub.conf/error
augtool> ls /augeas/files/boot/grub/grub.conf/error
augtool> ls /files/boot/grub/grub.conf
	# invokes the grub.lns automatically
	# /usr/share/augeas/lenses/distro/grub.lns
	# produces output like so (first 3 lines of the file)

#comment[1] = grub.conf generated by anaconda
#comment[2] = Note that you do not have to rerun grub after making changes to this file
#comment[3] = NOTICE:  You have a /boot partition.  This means that


==========
/etc/hosts

set /files/etc/hosts/01/ipaddr 192.168.0.1
set /files/etc/hosts/01/canonical pigiron.example.com
set /files/etc/hosts/01/alias[1] pigiron
set /files/etc/hosts/01/alias[2] piggy
save

this creates a line like so:
192.168.0.1 pigiron.example.com pigiron piggy


===========

augtool> ls /augeas/files/etc/securetty
path = /files/etc/securetty
mtime = 1414071532
lens/ = @Securetty

defvar sec /files/etc/securetty
ls $sec		# note how it breaks it up into 'nodes'
1 = console
..
23 = tty11

ins 024 after $sec/23	# insert a node into the tree
ls $sec
..
024 = (none)

set $sec/024 ttyS1
print $sec/024
/files/etc/securetty/024 = "ttyS1"

ins 024 after $sec/23		# this now creates another 'node'
				# because there is already a 024 node
ls $sec
..
024[1] = (none)
024[2] = ttyS1

set $sec/024[1] example
ls $sec
..
024[1] = example
024[2] = ttyS1

rm $sec/024[2]		# delete the 'ttyS1' entry..
ls $sec
..
024 = example

ins 024 after $sec/*[last()]  	# last line of the file
ins 025 after $sec/*[last() -1] # 2nd last line ..
ls $sec
rm $sec/024

set $sec/*[last()] ttyS1
print print $sec/*[last()]
/files/etc/securetty/024 = "ttyS1"

set $sec/*[last()-1] badexample
print $sec/*[last()-1]
/files/etc/securetty/024 = "ttyS1"

set $sec/*[last()-1] badexample
print $sec/*[last()-1]
/files/etc/securetty/026 = "badexample"

ins 01 after $sec/*[last()]  	# insert node at last line of file
set $sec/*[last()] ttyS1	# set node value

match $sec/*[. = 'tty11']
/files/etc/securetty/23 = tty11

..
..

augtool> print /files/etc/securetty/*[.='ttyS1']
/files/etc/securetty/24 = "ttyS1"
/files/etc/securetty/25 = "ttyS1"
/files/etc/securetty/01 = "ttyS1"
augtool> get /files/etc/securetty/*[.='ttyS1']
error: Too many matches for path expression
There are 3 nodes matching /files/etc/securetty/*[.='ttyS1']

== add console= parameters to /boot/grub/grub.conf ==

defvar g /files/boot/grub/grub.conf/
augtool> setm $g/title[*]/kernel console/01 ttyS1,57600
augtool> setm $g/title[*]/kernel console/02 tty0
augtool> print $g
augtool> save

fails with error..

==
# 2 entries for consoles...
set $g/title[1]/kernel/01/console[1] ttyS1,57600
set $g/title[1]/kernel/01/console[2] tty0

== success....

its a multi-valued child(?), so needs to be array-indexed(?)

setm $g/title[*]/kernel console[1] ttyS1,57600
setm $g/title[*]/kernel console[2] tty0

what a nightmare!!!!!
was furs Alptraum!!!!
Below also works

ins console after $g/title[1]/kernel
set $g/title[1]/kernel/console[1] ttyS1,57600
set $g/title[1]/kernel/console[2] tty0

==
ins serial after $g/timeout
set $g/serial/unit 1
set $g/serial/speed 57600
print $g/serial
augtool> print $g/serial
/files/boot/grub/grub.conf/serial
/files/boot/grub/grub.conf/serial/unit = "1"
/files/boot/grub/grub.conf/serial/speed = "57600"

writes:

==
ins terminal after $g/serial
set $g/terminal/01 --timeout=10
set $g/terminal/02 console
set $g/terminal/03 serial


== debugging ==
match /augeas//error
ls /augeas/files/boot/grub/grub.conf/error

augtool> ls /augeas/files/boot/grub/grub.conf/error
path = /files/boot/grub/grub.conf/title/kernel/01
lens = /usr/share/augeas/lenses/dist/grub.aug:165.21-.57:
message = Failed to match

  with tree
    { "console" = "ttyS1,57600" }

== /etc/sudoers

augtool> print /augeas/load/Sudoers
augtool> ls /augeas/files/etc/sudoers
path = /files/etc/sudoers
mtime = 1498655963
lens/ = @Sudoers
augtool>
augtool> defvar r /files/etc/sudoers
augtool> set $r/Defaults/secure_path "/sbin:/bin:/usr/sbin:/usr/bin:/opt/puppetlabs/bin/puppet"
augtool> match $r/Defaults/secure_path
augtool> print $r/Defaults/secure_path

/files/etc/sudoers/Defaults[10]/secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/opt/puppetlabs/bin/puppet

# Trying to break up /etc/sudoers secure_path a:b:c:d to add another element 'e' ..
# shellvars and shellvars_list are whitespace delimited
augtool> print /augeas/load/Sudoers/lens
/augeas/load/Sudoers/lens = "@Sudoers"
augtool> set /augeas/load/Sudoers/lens "Shellvars.lns"
augtool> print /augeas/load/Sudoers/lens
/augeas/load/Sudoers/lens = "Shellvars.lns"
augtool>
